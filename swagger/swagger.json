{
  "openapi": "3.0.0",
  "paths": {
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_signup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "User registration",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/signin": {
      "post": {
        "operationId": "AuthController_signin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User login success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "User login",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "AuthController_refresh",
        "parameters": [
          {
            "name": "rt",
            "required": true,
            "in": "query",
            "description": "Refresh token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refresh tokens success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "Refresh auth tokens",
        "tags": [
          "Auth"
        ]
      }
    },
    "/product": {
      "get": {
        "operationId": "ProductController_getProducts",
        "parameters": [
          {
            "name": "l",
            "required": false,
            "in": "query",
            "description": "Items limit on page ( from 1 to 50 )",
            "schema": {
              "default": 10,
              "example": 15,
              "type": "number"
            }
          },
          {
            "name": "p",
            "required": false,
            "in": "query",
            "description": "Items page ( min 1 )",
            "schema": {
              "default": 1,
              "example": 2,
              "type": "number"
            }
          },
          {
            "name": "n",
            "required": false,
            "in": "query",
            "description": "Product name",
            "schema": {
              "example": "nike",
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Sort by ( name, price, discount )",
            "schema": {
              "example": "price",
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort method ( ASC | DESC )",
            "schema": {
              "example": "ASC",
              "type": "string"
            }
          },
          {
            "name": "pfrom",
            "required": false,
            "in": "query",
            "description": "Product price from ( min 0 )",
            "schema": {
              "example": 500,
              "type": "number"
            }
          },
          {
            "name": "pto",
            "required": false,
            "in": "query",
            "description": "Product price to ( min 1 )",
            "schema": {
              "example": 1000,
              "type": "number"
            }
          },
          {
            "name": "cn",
            "required": false,
            "in": "query",
            "description": "Product category name",
            "schema": {
              "example": "Shoes",
              "type": "string"
            }
          },
          {
            "name": "cid",
            "required": false,
            "in": "query",
            "description": "Product category id",
            "schema": {
              "example": "17a54659-a06a-464f-a914-190cee7d4b1a",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products recived",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductsListDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "Get list of products",
        "tags": [
          "Product"
        ]
      },
      "post": {
        "operationId": "ProductController_createProduct",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create product",
        "tags": [
          "Product"
        ]
      }
    },
    "/product/{id}": {
      "get": {
        "operationId": "ProductController_getOneById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product recived",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "Get product by id",
        "tags": [
          "Product"
        ]
      },
      "delete": {
        "operationId": "ProductController_removeProduct",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product removed"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove product",
        "tags": [
          "Product"
        ]
      }
    },
    "/category": {
      "post": {
        "operationId": "CategoryController_createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create category",
        "tags": [
          "Category"
        ]
      },
      "get": {
        "operationId": "CategoryController_getRootCategories",
        "parameters": [
          {
            "name": "l",
            "required": false,
            "in": "query",
            "description": "Items limit on page ( from 1 to 50 )",
            "schema": {
              "default": 10,
              "example": 15,
              "type": "number"
            }
          },
          {
            "name": "p",
            "required": false,
            "in": "query",
            "description": "Items page ( min 1 )",
            "schema": {
              "default": 1,
              "example": 2,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Root categories received",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RootCategoriesDetail"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "Get root categories",
        "tags": [
          "Category"
        ]
      }
    },
    "/category/{id}/children": {
      "get": {
        "operationId": "CategoryController_getChildrenByParentId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Parent category id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "required": false,
            "in": "query",
            "description": "Retrieve all subcategories at all levels, or just the current one.",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subcategories received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDetails"
                  }
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "summary": "Get subcategories",
        "tags": [
          "Category"
        ]
      }
    },
    "/category/{id}": {
      "delete": {
        "operationId": "CategoryController_removeCategory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove category by id",
        "tags": [
          "Category"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "UserController_getUserProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User info recived",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnUserProfileDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user info",
        "tags": [
          "User"
        ]
      },
      "patch": {
        "operationId": "UserController_updateUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User info updated"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user info",
        "tags": [
          "User"
        ]
      }
    },
    "/user/password": {
      "patch": {
        "operationId": "UserController_updateUserPassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User password updated"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user password",
        "tags": [
          "User"
        ]
      }
    },
    "/user/cart": {
      "get": {
        "operationId": "CartController_getCart",
        "parameters": [
          {
            "name": "l",
            "required": false,
            "in": "query",
            "description": "Items limit on page ( from 1 to 50 )",
            "schema": {
              "default": 10,
              "example": 15,
              "type": "number"
            }
          },
          {
            "name": "p",
            "required": false,
            "in": "query",
            "description": "Items page ( min 1 )",
            "schema": {
              "default": 1,
              "example": 2,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User cart recived",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDetails"
                }
              }
            }
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user cart",
        "tags": [
          "Cart"
        ]
      },
      "post": {
        "operationId": "CartController_addProductToUserCart",
        "parameters": [
          {
            "name": "pid",
            "required": true,
            "in": "query",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success added"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add product to user cart",
        "tags": [
          "Cart"
        ]
      },
      "delete": {
        "operationId": "CartController_removeProductFromCart",
        "parameters": [
          {
            "name": "pid",
            "required": true,
            "in": "query",
            "description": "Product id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success removed"
          },
          "5XX": {
            "description": "Server error"
          },
          "4XX": {
            "description": "Check response message"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove product from user cart",
        "tags": [
          "Cart"
        ]
      }
    }
  },
  "info": {
    "title": "Fake Store API",
    "description": "A simple REST API that simulates an online store — provides fake products, categories, and users for testing, prototyping, and learning purposes.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name ( from 1 to 20 symbols )",
            "example": "Evgeny"
          },
          "lastName": {
            "type": "string",
            "description": "User last name ( from 1 to 20 symbols )",
            "example": "Smirnov"
          },
          "login": {
            "type": "string",
            "description": "User login ( from 3 to 24 symbols )",
            "example": "nodewalker"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "nodewalker@yandex.com"
          },
          "password": {
            "type": "string",
            "description": "User password ( from 8 to 32 symbols )",
            "example": "**********"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "login",
          "email",
          "password"
        ]
      },
      "TokensDetails": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "access token",
            "example": "eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJzdWIiOiIxN2E1NDY1OS1hMDZhLTQ2NGYtYTkxNC0xOTBjZWU3ZDRiMWEiLCJsb2dpbiI6Im5vZGV3YWxrZXIifQ.4k3a3M1kDJEay6JLsUlwwYtm33xNsnmqRco2Uveyq9M"
          },
          "refresh_token": {
            "type": "string",
            "description": "refresh token",
            "example": "eyJhbGciOiJIUzI1NiJ9.eyJSb2xlIjoiQWRtaW4iLCJzdWIiOiIxN2E1NDY1OS1hMDZhLTQ2NGYtYTkxNC0xOTBjZWU3ZDRiMWEiLCJsb2dpbiI6Im5vZGV3YWxrZXIifQ.4k3a3M1kDJEay6JLsUlwwYtm33xNsnmqRco2Uveyq9M"
          }
        },
        "required": [
          "access_token",
          "refresh_token"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "description": "User login ( from 3 to 24 symbols )",
            "example": "nodewalker"
          },
          "password": {
            "type": "string",
            "description": "User password ( from 8 to 32 symbols )",
            "example": "**********"
          }
        },
        "required": [
          "login",
          "password"
        ]
      },
      "ProductImageEntity": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Image url"
          }
        },
        "required": [
          "uuid"
        ]
      },
      "ProductCategoryDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Category id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          },
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Shoes"
          }
        },
        "required": [
          "uuid",
          "name"
        ]
      },
      "ProductDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Product id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Nike"
          },
          "price": {
            "type": "string",
            "description": "Product price",
            "example": 250
          },
          "discount": {
            "type": "string",
            "description": "Product discount",
            "example": 15
          },
          "images": {
            "description": "Product images ( /files/products/:id for get product image )",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductImageEntity"
            }
          },
          "category": {
            "description": "Product category",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCategoryDetails"
              }
            ]
          }
        },
        "required": [
          "uuid",
          "name",
          "price",
          "discount",
          "images",
          "category"
        ]
      },
      "PaginationDetails": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "description": "Total items",
            "example": 240
          },
          "page": {
            "type": "number",
            "description": "Current page",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Current limit",
            "example": 10
          },
          "totalPage": {
            "type": "number",
            "description": "Total page count",
            "example": 24
          },
          "isLastPage": {
            "type": "boolean",
            "description": "is last page?",
            "example": false
          }
        },
        "required": [
          "total",
          "page",
          "limit",
          "totalPage",
          "isLastPage"
        ]
      },
      "ProductsListDetails": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Product list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDetails"
            }
          },
          "pagintaion": {
            "description": "Paggination info",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDetails"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagintaion"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of product ( from 2 to 50 symbols )",
            "example": "New Balance 1906"
          },
          "price": {
            "type": "number",
            "description": "Price of product ( min 1 )",
            "example": 1000
          },
          "categoryId": {
            "type": "string",
            "description": "Category id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          },
          "discount": {
            "type": "number",
            "description": "Discount of product ( from 0 to 100 )",
            "default": 0,
            "example": 25
          },
          "images": {
            "items": {
              "type": "array"
            },
            "description": "Product images",
            "minItems": 1,
            "maxItems": 3,
            "type": "array"
          }
        },
        "required": [
          "name",
          "price",
          "categoryId",
          "discount",
          "images"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of category ( from 2 to 50 symbols )",
            "example": "Shoes"
          },
          "parentId": {
            "type": "string",
            "description": "Parent category id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          }
        },
        "required": [
          "name"
        ]
      },
      "CategoryDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Category id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          },
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Shoes"
          },
          "Childrens": {
            "description": "Field for retrieve subcategories at all level",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetails"
            }
          },
          "hasChildren": {
            "type": "boolean",
            "description": "Is category has children",
            "example": true
          },
          "hasProduct": {
            "type": "boolean",
            "description": "Is category has product",
            "example": false
          }
        },
        "required": [
          "uuid",
          "name"
        ]
      },
      "RootCategoriesDetail": {
        "type": "object",
        "properties": {
          "tree": {
            "description": "Root categories tree",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDetails"
            }
          },
          "pagination": {
            "description": "Paggination info",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationDetails"
              }
            ]
          }
        },
        "required": [
          "tree",
          "pagination"
        ]
      },
      "ReturnUserProfileDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "User id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "Evgeny"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Smirnov"
          },
          "login": {
            "type": "string",
            "description": "User login",
            "example": "nodewalker"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "nodewalker@yandex.com"
          },
          "avatarURL": {
            "type": "string",
            "description": "User avatar url"
          }
        },
        "required": [
          "uuid",
          "firstName",
          "lastName",
          "login",
          "email",
          "avatarURL"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "User first name ( from 1 to 20 symbols )",
            "example": "Evgeny"
          },
          "lastName": {
            "type": "string",
            "description": "User last name ( from 1 to 20 symbols )",
            "example": "Smirnov"
          },
          "login": {
            "type": "string",
            "description": "User login ( from 3 to 24 symbols )",
            "example": "nodewalker"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "nodewalker@yandex.com"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User avatar ( /files/avatars/:id for get user avatar )"
          }
        }
      },
      "UpdateUserPasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "User old password ( from 8 to 32 symbols )",
            "example": "**********"
          },
          "newPassword": {
            "type": "string",
            "description": "User new password ( from 8 to 32 symbols )",
            "example": "**********"
          },
          "repeatNewPassword": {
            "type": "string",
            "description": "Repeat new password ( from 8 to 32 symbols )",
            "example": "**********"
          }
        },
        "required": [
          "currentPassword",
          "newPassword",
          "repeatNewPassword"
        ]
      },
      "CartDetails": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Cart id",
            "example": "17a54659-a06a-464f-a914-190cee7d4b1a"
          },
          "products": {
            "description": "Products from cart",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDetails"
            }
          }
        },
        "required": [
          "uuid",
          "products"
        ]
      }
    }
  }
}