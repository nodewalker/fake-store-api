name: CI + Docs

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    branches:
      - master

permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      #   - name: Run tests
      #     run: npm test

      - name: Generate GitBook
        run: npm run generate:gitbook

      - name: Commit and push changes
        run: |
          git config user.name "Smirnov Evgeny"
          git config user.email "85483574+nodewalker@users.noreply.github.com"
          git switch gitbook --merge
          git add .
          git commit -m "[Action commit] Update GitBook" || echo "No changes to commit"
          git push

  deploy:
    runs-on: ubuntu-latest
    # needs: check
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /home/pets/fake-store-api
            git pull
            echo "SERVER_HOST=${{ secrets.SERVER_HOST }}" >> .env.prod
            echo "PORT=${{ secrets.API_PORT }}" >> .env.prod
            echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env.prod
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env.prod
            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env.prod
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env.prod
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env.prod
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.prod
            echo "${{ secrets.SSL_CRT }}" >> fakestoreapi.crt
            echo "${{ secrets.SSL_KEY }}" >> fakestoreapi.key
            docker compose --env-file .env.prod up -d db 
            docker compose --env-file .env.prod up -d api --build 
            docker compose --env-file .env.prod up -d nginx --build 
            rm fakestoreapi.crt
            rm fakestoreapi.key
            rm .env.prod
          EOF
